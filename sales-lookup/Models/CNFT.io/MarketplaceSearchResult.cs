using System;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace sales_lookup.Models.CNFT.io
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var marketplaceSearchResult = MarketplaceSearchResult.FromJson(jsonString);

    public partial class MarketplaceSearchResult
    {
        [JsonProperty("results")]
        public Result[] Results { get; set; }

        [JsonProperty("page")]
        public long Page { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("asset")]
        public Asset Asset { get; set; }

        [JsonProperty("sellerId")]
        public string SellerId { get; set; }

        [JsonProperty("searchTerm")]
        public string SearchTerm { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }

        [JsonProperty("offers")]
        public object[] Offers { get; set; }

        [JsonProperty("featured")]
        public bool Featured { get; set; }

        [JsonProperty("views")]
        public string[] Views { get; set; }

        [JsonProperty("viewCount")]
        public long ViewCount { get; set; }

        [JsonProperty("favouriteCount")]
        public long FavouriteCount { get; set; }

        [JsonProperty("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("__v")]
        public long V { get; set; }
    }

    public partial class Asset
    {
        [JsonProperty("assetId")]
        public string AssetId { get; set; }

        [JsonProperty("policyId")]
        public string PolicyId { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("unit")]
        public string Unit { get; set; }

        [JsonProperty("quantity")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Quantity { get; set; }

        [JsonProperty("nsfw")]
        public bool Nsfw { get; set; }

        [JsonProperty("mintdate")]
        public DateTimeOffset Mintdate { get; set; }

        [JsonProperty("project")]
        public string Project { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("-----Info-----")]
        public string[] Info { get; set; }

        [JsonProperty("-----Land Sale 1-----")]
        public LandSale1[] LandSale1 { get; set; }

        [JsonProperty("-----Product Information-----")]
        public ProductInformation[] ProductInformation { get; set; }
    }

    public partial class LandSale1
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? X { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Y { get; set; }
    }

    public partial class ProductInformation
    {
        [JsonProperty("Pavia.io", NullValueHandling = NullValueHandling.Ignore)]
        public Uri PaviaIo { get; set; }

        [JsonProperty("Copyright", NullValueHandling = NullValueHandling.Ignore)]
        public string Copyright { get; set; }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}